/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package server.core.data.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/**
 * An Observation represents a single Sensor reading of an ObservedProperty. A
 * Sensor sends Observations to a specified Datastream.
 */
@org.apache.avro.specific.AvroGenerated
public class Observation extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {
	private static final long serialVersionUID = -8728910559290269715L;
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
			"{\"type\":\"record\",\"name\":\"Observation\",\"namespace\":\"main.java.pw.oliver.jmkb.avroclasses\",\"doc\":\"An Observation represents a single Sensor reading of an ObservedProperty. A Sensor sends Observations to a specified Datastream.\",\"fields\":[{\"name\":\"iotId\",\"type\":\"string\",\"doc\":\"iotId of this Observation\"},{\"name\":\"phenomenonTime\",\"type\":\"string\",\"doc\":\"Time (ISO 8601) of the phenomenon\"},{\"name\":\"resultTime\",\"type\":\"string\",\"doc\":\"Time (ISO 8601) of the result\"},{\"name\":\"result\",\"type\":\"string\",\"doc\":\"Any result value represented as a string\"},{\"name\":\"resultQuality\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional string describing the quality of the result\"},{\"name\":\"validTime\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional time (ISO 8601) of validity\"},{\"name\":\"Datastream\",\"type\":\"string\",\"doc\":\"Datastream associated with the Observation\"},{\"name\":\"FeatureOfInterest\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional FeatureOfInterest associated with the Observation\"}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	private static SpecificData MODEL$ = new SpecificData();

	private static final BinaryMessageEncoder<Observation> ENCODER = new BinaryMessageEncoder<Observation>(MODEL$,
			SCHEMA$);

	private static final BinaryMessageDecoder<Observation> DECODER = new BinaryMessageDecoder<Observation>(MODEL$,
			SCHEMA$);

	/**
	 * Return the BinaryMessageDecoder instance used by this class.
	 */
	public static BinaryMessageDecoder<Observation> getDecoder() {
		return DECODER;
	}

	/**
	 * Create a new BinaryMessageDecoder instance for this class that uses the
	 * specified {@link SchemaStore}.
	 * 
	 * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
	 */
	public static BinaryMessageDecoder<Observation> createDecoder(SchemaStore resolver) {
		return new BinaryMessageDecoder<Observation>(MODEL$, SCHEMA$, resolver);
	}

	/** Serializes this Observation to a ByteBuffer. */
	public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
		return ENCODER.encode(this);
	}

	/** Deserializes a Observation from a ByteBuffer. */
	public static Observation fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
		return DECODER.decode(b);
	}

	/** iotId of this Observation */
	@Deprecated
	public java.lang.CharSequence iotId;
	/** Time (ISO 8601) of the phenomenon */
	@Deprecated
	public java.lang.CharSequence phenomenonTime;
	/** Time (ISO 8601) of the result */
	@Deprecated
	public java.lang.CharSequence resultTime;
	/** Any result value represented as a string */
	@Deprecated
	public java.lang.CharSequence result;
	/** Optional string describing the quality of the result */
	@Deprecated
	public java.lang.CharSequence resultQuality;
	/** Optional time (ISO 8601) of validity */
	@Deprecated
	public java.lang.CharSequence validTime;
	/** Datastream associated with the Observation */
	@Deprecated
	public java.lang.CharSequence Datastream;
	/** Optional FeatureOfInterest associated with the Observation */
	@Deprecated
	public java.lang.CharSequence FeatureOfInterest;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public Observation() {
	}

	/**
	 * All-args constructor.
	 * 
	 * @param iotId             iotId of this Observation
	 * @param phenomenonTime    Time (ISO 8601) of the phenomenon
	 * @param resultTime        Time (ISO 8601) of the result
	 * @param result            Any result value represented as a string
	 * @param resultQuality     Optional string describing the quality of the result
	 * @param validTime         Optional time (ISO 8601) of validity
	 * @param Datastream        Datastream associated with the Observation
	 * @param FeatureOfInterest Optional FeatureOfInterest associated with the
	 *                          Observation
	 */
	public Observation(java.lang.CharSequence iotId, java.lang.CharSequence phenomenonTime,
			java.lang.CharSequence resultTime, java.lang.CharSequence result, java.lang.CharSequence resultQuality,
			java.lang.CharSequence validTime, java.lang.CharSequence Datastream,
			java.lang.CharSequence FeatureOfInterest) {
		this.iotId = iotId;
		this.phenomenonTime = phenomenonTime;
		this.resultTime = resultTime;
		this.result = result;
		this.resultQuality = resultQuality;
		this.validTime = validTime;
		this.Datastream = Datastream;
		this.FeatureOfInterest = FeatureOfInterest;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return iotId;
		case 1:
			return phenomenonTime;
		case 2:
			return resultTime;
		case 3:
			return result;
		case 4:
			return resultQuality;
		case 5:
			return validTime;
		case 6:
			return Datastream;
		case 7:
			return FeatureOfInterest;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			iotId = (java.lang.CharSequence) value$;
			break;
		case 1:
			phenomenonTime = (java.lang.CharSequence) value$;
			break;
		case 2:
			resultTime = (java.lang.CharSequence) value$;
			break;
		case 3:
			result = (java.lang.CharSequence) value$;
			break;
		case 4:
			resultQuality = (java.lang.CharSequence) value$;
			break;
		case 5:
			validTime = (java.lang.CharSequence) value$;
			break;
		case 6:
			Datastream = (java.lang.CharSequence) value$;
			break;
		case 7:
			FeatureOfInterest = (java.lang.CharSequence) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'iotId' field.
	 * 
	 * @return iotId of this Observation
	 */
	public java.lang.CharSequence getIotId() {
		return iotId;
	}

	/**
	 * Sets the value of the 'iotId' field. iotId of this Observation
	 * 
	 * @param value the value to set.
	 */
	public void setIotId(java.lang.CharSequence value) {
		this.iotId = value;
	}

	/**
	 * Gets the value of the 'phenomenonTime' field.
	 * 
	 * @return Time (ISO 8601) of the phenomenon
	 */
	public java.lang.CharSequence getPhenomenonTime() {
		return phenomenonTime;
	}

	/**
	 * Sets the value of the 'phenomenonTime' field. Time (ISO 8601) of the
	 * phenomenon
	 * 
	 * @param value the value to set.
	 */
	public void setPhenomenonTime(java.lang.CharSequence value) {
		this.phenomenonTime = value;
	}

	/**
	 * Gets the value of the 'resultTime' field.
	 * 
	 * @return Time (ISO 8601) of the result
	 */
	public java.lang.CharSequence getResultTime() {
		return resultTime;
	}

	/**
	 * Sets the value of the 'resultTime' field. Time (ISO 8601) of the result
	 * 
	 * @param value the value to set.
	 */
	public void setResultTime(java.lang.CharSequence value) {
		this.resultTime = value;
	}

	/**
	 * Gets the value of the 'result' field.
	 * 
	 * @return Any result value represented as a string
	 */
	public java.lang.CharSequence getResult() {
		return result;
	}

	/**
	 * Sets the value of the 'result' field. Any result value represented as a
	 * string
	 * 
	 * @param value the value to set.
	 */
	public void setResult(java.lang.CharSequence value) {
		this.result = value;
	}

	/**
	 * Gets the value of the 'resultQuality' field.
	 * 
	 * @return Optional string describing the quality of the result
	 */
	public java.lang.CharSequence getResultQuality() {
		return resultQuality;
	}

	/**
	 * Sets the value of the 'resultQuality' field. Optional string describing the
	 * quality of the result
	 * 
	 * @param value the value to set.
	 */
	public void setResultQuality(java.lang.CharSequence value) {
		this.resultQuality = value;
	}

	/**
	 * Gets the value of the 'validTime' field.
	 * 
	 * @return Optional time (ISO 8601) of validity
	 */
	public java.lang.CharSequence getValidTime() {
		return validTime;
	}

	/**
	 * Sets the value of the 'validTime' field. Optional time (ISO 8601) of validity
	 * 
	 * @param value the value to set.
	 */
	public void setValidTime(java.lang.CharSequence value) {
		this.validTime = value;
	}

	/**
	 * Gets the value of the 'Datastream' field.
	 * 
	 * @return Datastream associated with the Observation
	 */
	public java.lang.CharSequence getDatastream() {
		return Datastream;
	}

	/**
	 * Sets the value of the 'Datastream' field. Datastream associated with the
	 * Observation
	 * 
	 * @param value the value to set.
	 */
	public void setDatastream(java.lang.CharSequence value) {
		this.Datastream = value;
	}

	/**
	 * Gets the value of the 'FeatureOfInterest' field.
	 * 
	 * @return Optional FeatureOfInterest associated with the Observation
	 */
	public java.lang.CharSequence getFeatureOfInterest() {
		return FeatureOfInterest;
	}

	/**
	 * Sets the value of the 'FeatureOfInterest' field. Optional FeatureOfInterest
	 * associated with the Observation
	 * 
	 * @param value the value to set.
	 */
	public void setFeatureOfInterest(java.lang.CharSequence value) {
		this.FeatureOfInterest = value;
	}

	/**
	 * Creates a new Observation RecordBuilder.
	 * 
	 * @return A new Observation RecordBuilder
	 */
	public static server.core.data.avro.Observation.Builder newBuilder() {
		return new server.core.data.avro.Observation.Builder();
	}

	/**
	 * Creates a new Observation RecordBuilder by copying an existing Builder.
	 * 
	 * @param other The existing builder to copy.
	 * @return A new Observation RecordBuilder
	 */
	public static server.core.data.avro.Observation.Builder newBuilder(
			server.core.data.avro.Observation.Builder other) {
		return new server.core.data.avro.Observation.Builder(other);
	}

	/**
	 * Creates a new Observation RecordBuilder by copying an existing Observation
	 * instance.
	 * 
	 * @param other The existing instance to copy.
	 * @return A new Observation RecordBuilder
	 */
	public static server.core.data.avro.Observation.Builder newBuilder(server.core.data.avro.Observation other) {
		return new server.core.data.avro.Observation.Builder(other);
	}

	/**
	 * RecordBuilder for Observation instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Observation>
			implements org.apache.avro.data.RecordBuilder<Observation> {

		/** iotId of this Observation */
		private java.lang.CharSequence iotId;
		/** Time (ISO 8601) of the phenomenon */
		private java.lang.CharSequence phenomenonTime;
		/** Time (ISO 8601) of the result */
		private java.lang.CharSequence resultTime;
		/** Any result value represented as a string */
		private java.lang.CharSequence result;
		/** Optional string describing the quality of the result */
		private java.lang.CharSequence resultQuality;
		/** Optional time (ISO 8601) of validity */
		private java.lang.CharSequence validTime;
		/** Datastream associated with the Observation */
		private java.lang.CharSequence Datastream;
		/** Optional FeatureOfInterest associated with the Observation */
		private java.lang.CharSequence FeatureOfInterest;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * 
		 * @param other The existing Builder to copy.
		 */
		private Builder(server.core.data.avro.Observation.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.iotId)) {
				this.iotId = data().deepCopy(fields()[0].schema(), other.iotId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.phenomenonTime)) {
				this.phenomenonTime = data().deepCopy(fields()[1].schema(), other.phenomenonTime);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.resultTime)) {
				this.resultTime = data().deepCopy(fields()[2].schema(), other.resultTime);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(fields()[3], other.result)) {
				this.result = data().deepCopy(fields()[3].schema(), other.result);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(fields()[4], other.resultQuality)) {
				this.resultQuality = data().deepCopy(fields()[4].schema(), other.resultQuality);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(fields()[5], other.validTime)) {
				this.validTime = data().deepCopy(fields()[5].schema(), other.validTime);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(fields()[6], other.Datastream)) {
				this.Datastream = data().deepCopy(fields()[6].schema(), other.Datastream);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(fields()[7], other.FeatureOfInterest)) {
				this.FeatureOfInterest = data().deepCopy(fields()[7].schema(), other.FeatureOfInterest);
				fieldSetFlags()[7] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing Observation instance
		 * 
		 * @param other The existing instance to copy.
		 */
		private Builder(server.core.data.avro.Observation other) {
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.iotId)) {
				this.iotId = data().deepCopy(fields()[0].schema(), other.iotId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.phenomenonTime)) {
				this.phenomenonTime = data().deepCopy(fields()[1].schema(), other.phenomenonTime);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.resultTime)) {
				this.resultTime = data().deepCopy(fields()[2].schema(), other.resultTime);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(fields()[3], other.result)) {
				this.result = data().deepCopy(fields()[3].schema(), other.result);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(fields()[4], other.resultQuality)) {
				this.resultQuality = data().deepCopy(fields()[4].schema(), other.resultQuality);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(fields()[5], other.validTime)) {
				this.validTime = data().deepCopy(fields()[5].schema(), other.validTime);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(fields()[6], other.Datastream)) {
				this.Datastream = data().deepCopy(fields()[6].schema(), other.Datastream);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(fields()[7], other.FeatureOfInterest)) {
				this.FeatureOfInterest = data().deepCopy(fields()[7].schema(), other.FeatureOfInterest);
				fieldSetFlags()[7] = true;
			}
		}

		/**
		 * Gets the value of the 'iotId' field. iotId of this Observation
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getIotId() {
			return iotId;
		}

		/**
		 * Sets the value of the 'iotId' field. iotId of this Observation
		 * 
		 * @param value The value of 'iotId'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setIotId(java.lang.CharSequence value) {
			validate(fields()[0], value);
			this.iotId = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'iotId' field has been set. iotId of this Observation
		 * 
		 * @return True if the 'iotId' field has been set, false otherwise.
		 */
		public boolean hasIotId() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'iotId' field. iotId of this Observation
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearIotId() {
			iotId = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'phenomenonTime' field. Time (ISO 8601) of the
		 * phenomenon
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getPhenomenonTime() {
			return phenomenonTime;
		}

		/**
		 * Sets the value of the 'phenomenonTime' field. Time (ISO 8601) of the
		 * phenomenon
		 * 
		 * @param value The value of 'phenomenonTime'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setPhenomenonTime(java.lang.CharSequence value) {
			validate(fields()[1], value);
			this.phenomenonTime = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'phenomenonTime' field has been set. Time (ISO 8601) of
		 * the phenomenon
		 * 
		 * @return True if the 'phenomenonTime' field has been set, false otherwise.
		 */
		public boolean hasPhenomenonTime() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'phenomenonTime' field. Time (ISO 8601) of the
		 * phenomenon
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearPhenomenonTime() {
			phenomenonTime = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/**
		 * Gets the value of the 'resultTime' field. Time (ISO 8601) of the result
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getResultTime() {
			return resultTime;
		}

		/**
		 * Sets the value of the 'resultTime' field. Time (ISO 8601) of the result
		 * 
		 * @param value The value of 'resultTime'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setResultTime(java.lang.CharSequence value) {
			validate(fields()[2], value);
			this.resultTime = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/**
		 * Checks whether the 'resultTime' field has been set. Time (ISO 8601) of the
		 * result
		 * 
		 * @return True if the 'resultTime' field has been set, false otherwise.
		 */
		public boolean hasResultTime() {
			return fieldSetFlags()[2];
		}

		/**
		 * Clears the value of the 'resultTime' field. Time (ISO 8601) of the result
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearResultTime() {
			resultTime = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		/**
		 * Gets the value of the 'result' field. Any result value represented as a
		 * string
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getResult() {
			return result;
		}

		/**
		 * Sets the value of the 'result' field. Any result value represented as a
		 * string
		 * 
		 * @param value The value of 'result'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setResult(java.lang.CharSequence value) {
			validate(fields()[3], value);
			this.result = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/**
		 * Checks whether the 'result' field has been set. Any result value represented
		 * as a string
		 * 
		 * @return True if the 'result' field has been set, false otherwise.
		 */
		public boolean hasResult() {
			return fieldSetFlags()[3];
		}

		/**
		 * Clears the value of the 'result' field. Any result value represented as a
		 * string
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearResult() {
			result = null;
			fieldSetFlags()[3] = false;
			return this;
		}

		/**
		 * Gets the value of the 'resultQuality' field. Optional string describing the
		 * quality of the result
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getResultQuality() {
			return resultQuality;
		}

		/**
		 * Sets the value of the 'resultQuality' field. Optional string describing the
		 * quality of the result
		 * 
		 * @param value The value of 'resultQuality'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setResultQuality(java.lang.CharSequence value) {
			validate(fields()[4], value);
			this.resultQuality = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/**
		 * Checks whether the 'resultQuality' field has been set. Optional string
		 * describing the quality of the result
		 * 
		 * @return True if the 'resultQuality' field has been set, false otherwise.
		 */
		public boolean hasResultQuality() {
			return fieldSetFlags()[4];
		}

		/**
		 * Clears the value of the 'resultQuality' field. Optional string describing the
		 * quality of the result
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearResultQuality() {
			resultQuality = null;
			fieldSetFlags()[4] = false;
			return this;
		}

		/**
		 * Gets the value of the 'validTime' field. Optional time (ISO 8601) of validity
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getValidTime() {
			return validTime;
		}

		/**
		 * Sets the value of the 'validTime' field. Optional time (ISO 8601) of validity
		 * 
		 * @param value The value of 'validTime'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setValidTime(java.lang.CharSequence value) {
			validate(fields()[5], value);
			this.validTime = value;
			fieldSetFlags()[5] = true;
			return this;
		}

		/**
		 * Checks whether the 'validTime' field has been set. Optional time (ISO 8601)
		 * of validity
		 * 
		 * @return True if the 'validTime' field has been set, false otherwise.
		 */
		public boolean hasValidTime() {
			return fieldSetFlags()[5];
		}

		/**
		 * Clears the value of the 'validTime' field. Optional time (ISO 8601) of
		 * validity
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearValidTime() {
			validTime = null;
			fieldSetFlags()[5] = false;
			return this;
		}

		/**
		 * Gets the value of the 'Datastream' field. Datastream associated with the
		 * Observation
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getDatastream() {
			return Datastream;
		}

		/**
		 * Sets the value of the 'Datastream' field. Datastream associated with the
		 * Observation
		 * 
		 * @param value The value of 'Datastream'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setDatastream(java.lang.CharSequence value) {
			validate(fields()[6], value);
			this.Datastream = value;
			fieldSetFlags()[6] = true;
			return this;
		}

		/**
		 * Checks whether the 'Datastream' field has been set. Datastream associated
		 * with the Observation
		 * 
		 * @return True if the 'Datastream' field has been set, false otherwise.
		 */
		public boolean hasDatastream() {
			return fieldSetFlags()[6];
		}

		/**
		 * Clears the value of the 'Datastream' field. Datastream associated with the
		 * Observation
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearDatastream() {
			Datastream = null;
			fieldSetFlags()[6] = false;
			return this;
		}

		/**
		 * Gets the value of the 'FeatureOfInterest' field. Optional FeatureOfInterest
		 * associated with the Observation
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getFeatureOfInterest() {
			return FeatureOfInterest;
		}

		/**
		 * Sets the value of the 'FeatureOfInterest' field. Optional FeatureOfInterest
		 * associated with the Observation
		 * 
		 * @param value The value of 'FeatureOfInterest'.
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder setFeatureOfInterest(java.lang.CharSequence value) {
			validate(fields()[7], value);
			this.FeatureOfInterest = value;
			fieldSetFlags()[7] = true;
			return this;
		}

		/**
		 * Checks whether the 'FeatureOfInterest' field has been set. Optional
		 * FeatureOfInterest associated with the Observation
		 * 
		 * @return True if the 'FeatureOfInterest' field has been set, false otherwise.
		 */
		public boolean hasFeatureOfInterest() {
			return fieldSetFlags()[7];
		}

		/**
		 * Clears the value of the 'FeatureOfInterest' field. Optional FeatureOfInterest
		 * associated with the Observation
		 * 
		 * @return This builder.
		 */
		public server.core.data.avro.Observation.Builder clearFeatureOfInterest() {
			FeatureOfInterest = null;
			fieldSetFlags()[7] = false;
			return this;
		}

		@Override
		@SuppressWarnings("unchecked")
		public Observation build() {
			try {
				Observation record = new Observation();
				record.iotId = fieldSetFlags()[0] ? this.iotId : (java.lang.CharSequence) defaultValue(fields()[0]);
				record.phenomenonTime = fieldSetFlags()[1] ? this.phenomenonTime
						: (java.lang.CharSequence) defaultValue(fields()[1]);
				record.resultTime = fieldSetFlags()[2] ? this.resultTime
						: (java.lang.CharSequence) defaultValue(fields()[2]);
				record.result = fieldSetFlags()[3] ? this.result : (java.lang.CharSequence) defaultValue(fields()[3]);
				record.resultQuality = fieldSetFlags()[4] ? this.resultQuality
						: (java.lang.CharSequence) defaultValue(fields()[4]);
				record.validTime = fieldSetFlags()[5] ? this.validTime
						: (java.lang.CharSequence) defaultValue(fields()[5]);
				record.Datastream = fieldSetFlags()[6] ? this.Datastream
						: (java.lang.CharSequence) defaultValue(fields()[6]);
				record.FeatureOfInterest = fieldSetFlags()[7] ? this.FeatureOfInterest
						: (java.lang.CharSequence) defaultValue(fields()[7]);
				return record;
			} catch (java.lang.Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}

	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumWriter<Observation> WRITER$ = (org.apache.avro.io.DatumWriter<Observation>) MODEL$
			.createDatumWriter(SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumReader<Observation> READER$ = (org.apache.avro.io.DatumReader<Observation>) MODEL$
			.createDatumReader(SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}

}